//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Books = newBooksTable("public", "books", "")

type booksTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	Title      postgres.ColumnString
	UploadedBy postgres.ColumnString
	UploadedAt postgres.ColumnTimestamp
	Hash       postgres.ColumnBytea
	Path       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type BooksTable struct {
	booksTable

	EXCLUDED booksTable
}

// AS creates new BooksTable with assigned alias
func (a BooksTable) AS(alias string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BooksTable with assigned schema name
func (a BooksTable) FromSchema(schemaName string) *BooksTable {
	return newBooksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BooksTable with assigned table prefix
func (a BooksTable) WithPrefix(prefix string) *BooksTable {
	return newBooksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BooksTable with assigned table suffix
func (a BooksTable) WithSuffix(suffix string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBooksTable(schemaName, tableName, alias string) *BooksTable {
	return &BooksTable{
		booksTable: newBooksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newBooksTableImpl("", "excluded", ""),
	}
}

func newBooksTableImpl(schemaName, tableName, alias string) booksTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		TitleColumn      = postgres.StringColumn("title")
		UploadedByColumn = postgres.StringColumn("uploaded_by")
		UploadedAtColumn = postgres.TimestampColumn("uploaded_at")
		HashColumn       = postgres.ByteaColumn("hash")
		PathColumn       = postgres.StringColumn("path")
		allColumns       = postgres.ColumnList{IDColumn, TitleColumn, UploadedByColumn, UploadedAtColumn, HashColumn, PathColumn}
		mutableColumns   = postgres.ColumnList{TitleColumn, UploadedByColumn, UploadedAtColumn, HashColumn, PathColumn}
		defaultColumns   = postgres.ColumnList{TitleColumn, UploadedAtColumn}
	)

	return booksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Title:      TitleColumn,
		UploadedBy: UploadedByColumn,
		UploadedAt: UploadedAtColumn,
		Hash:       HashColumn,
		Path:       PathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
