package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"encoding/hex"
	"fmt"

	"github.com/Shelffy/shelffy/internal/api/gql/gqlmodel"
	contextvalues "github.com/Shelffy/shelffy/internal/context_values"
	"github.com/Shelffy/shelffy/internal/entities"
)

// UploadBook is the resolver for the uploadBook field.
func (r *mutationResolver) UploadBook(ctx context.Context, input *gqlmodel.BookInput) (*gqlmodel.BookPayload, error) {
	fmt.Println(*input)
	userID := contextvalues.GetUserIDOrPanic(ctx)
	uploadedBook, err := r.BooksService.Upload(
		ctx,
		entities.Book{
			Title:      input.File.Filename,
			UploadedBy: userID,
		},
		input.File.File,
	)
	if err != nil {
		return nil, err
	}
	return &gqlmodel.BookPayload{
		ID:         uploadedBook.ID,
		Title:      uploadedBook.Title,
		Hash:       hex.EncodeToString(uploadedBook.Hash[:]),
		UploadedAt: uploadedBook.UploadedAt,
		UploadedBy: uploadedBook.UploadedBy,
	}, nil
}
