package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"errors"
	"net/http"

	"github.com/Shelffy/shelffy/internal/api"
	"github.com/Shelffy/shelffy/internal/api/gql/gqlmodel"
	contextvalues "github.com/Shelffy/shelffy/internal/context_values"
	"github.com/Shelffy/shelffy/internal/entities"
	"github.com/Shelffy/shelffy/internal/repositories"
	"github.com/Shelffy/shelffy/internal/services"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, register gqlmodel.RegisterUserInput) (*gqlmodel.User, error) {
	_, err := r.UsersService.GetByEmail(ctx, register.Email)
	if err != nil && !errors.Is(err, repositories.ErrUserNotFound) {
		r.Logger.Error("failed to get user", "error", err)
		return nil, errors.New("internal error")
	} else if err == nil {
		return nil, errors.New("user with this email already exists")
	}
	dbUser, err := r.UsersService.Create(ctx, entities.User{
		Email:    register.Email,
		Username: register.Username,
		Password: register.Password,
		IsActive: true,
	})
	if err != nil {
		return nil, errors.New("internal error")
	}
	return &gqlmodel.User{
		ID:        dbUser.ID,
		Email:     dbUser.Email,
		IsActive:  dbUser.IsActive,
		CreatedAt: dbUser.CreatedAt,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login gqlmodel.LoginInput) (*gqlmodel.LoginPayload, error) {
	w := contextvalues.GetResponseWriterOrPanic(ctx)
	dbUser, session, err := r.AuthService.Login(ctx, login.Email, login.Password)
	if err != nil && !errors.Is(err, services.ErrInvalidCredentials) {
		r.Logger.Error("failed to create session", "error", err)
		return nil, errors.New("internal error")
	} else if errors.Is(err, services.ErrInvalidCredentials) {
		return nil, errors.New("email or password is incorrect")
	}
	http.SetCookie(w, &http.Cookie{
		Name:     api.SessionIDCookieName,
		Value:    session.ID,
		Path:     "/",
		Expires:  session.ExpiresAt,
		HttpOnly: true,
	})
	return &gqlmodel.LoginPayload{
		User: &gqlmodel.User{
			ID:        dbUser.ID,
			Email:     dbUser.Email,
			IsActive:  dbUser.IsActive,
			CreatedAt: dbUser.CreatedAt,
		},
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	w := contextvalues.GetResponseWriterOrPanic(ctx)
	sessionID := contextvalues.GetSessionIDOrPanic(ctx)
	if err := r.AuthService.Logout(ctx, sessionID); err != nil {
		r.Logger.Error("failed to logout", "error", err)
		return false, err
	}
	http.SetCookie(w, &http.Cookie{
		Name:   api.SessionIDCookieName,
		Value:  "",
		Path:   "/",
		MaxAge: -1,
	})
	return true, nil
}
