package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/Shelffy/shelffy/internal/api/gql/gqlmodel"
	contextvalues "github.com/Shelffy/shelffy/internal/context_values"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*gqlmodel.User, error) {
	user := contextvalues.GetUserOrPanic(ctx)
	dbUser, err := r.UsersService.GetByID(ctx, user.ID)
	if err != nil {
		return nil, err
	}
	return &gqlmodel.User{
		ID:        dbUser.ID,
		Email:     dbUser.Email,
		IsActive:  dbUser.IsActive,
		CreatedAt: dbUser.CreatedAt,
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input gqlmodel.UserInput) (*gqlmodel.User, error) {
	dbUser, err := r.UsersService.GetByID(ctx, input.UserID)
	if err != nil {
		return nil, err
	}
	return &gqlmodel.User{
		ID:        dbUser.ID,
		Email:     dbUser.Email,
		IsActive:  dbUser.IsActive,
		CreatedAt: dbUser.CreatedAt,
	}, nil
}
